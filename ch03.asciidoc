[[chapter_elliptic_curve cryptography]]
== Elliptic Curve Cryptography

The previous two chapters covered some fundamental math. We learned how Finite Fields work and we also learned what an Elliptic Curve is. In this chapter, we're going to combine the two concepts to get Elliptic Curve Cryptography. Specifically, we're going to build the primitives needed to sign and verify messages, which is at the heart of what Bitcoin does.

=== Elliptic Curves over Reals

We discussed in the last chapter what an Elliptic curve looks like visually because we were plotting the curve over *real* numbers. Specifically, it's not just integers or even rational numbers, but all *real* numbers. Pi, sqrt(2), e+7th root of 19, etc are all part of real numbers.

What's interesting is that *real* numbers are also a field. Note unlike a *finite* field, there are an infinite number of real numbers, but otherwise the same properties hold:

* if *a* and *b* are in the set, *a+b* and *aâ‹…b* is in the set. We call this property _closed_
* if *a* is in the set, *-a* is in the set, or what we call the _additive inverse_.
* if *a* is in the set and is not 0, *a^-1^* is in the set, or what we call the _multiplicative inverse_.

Clearly, all of these are true as normal addition and multiplication apply for the first part, -x applies for the second part and 1/x applies for the third part.

The nice thing about real numbers is that we can easily plot what's going on and see the whole thing visually as we did in the last chapter. For example, y^2^=x^3^+7 can be plotted like this:

TODO: graph of secp256k1 curve

What's interesting is that we can use this equation over any field, including the Finite Fields we explored in Chapter 1. The only difference is that we have to use the addition/subtraction/multiplication/division as we defined them, not the "normal" versions that the real numbers use.

=== Elliptic Curves over Finite Fields

For example, we can see what to do for the equation y^2^=x^3^+7 over F~103~. Let's see if the point (17,64) is on the curve:

64^2^%103=79
(17^3^+7)%103=79

Indeed, that point is on the curve using the Finite Field math.

Because we're evaluating the equation over a Finite Field, the plot of the equation looks vastly different:

TODO: graph of secp256k1 curve over finite field

As you can see, it's very much a scattershot of points and there's no smooth curve here. This is not surprising since the points are discrete.

What's important here to realize is that we can evaluate the same equation using the addition, subtraction, multiplication, division and exponentiation as we defined them for Finite Fields and everything still works. This may seem surprising, but abstract math has regularities like this despite being different than the traditional modes of calculation you may be familiar with.

==== Exercise {counter:exercise}

Evaluate whether these points are on the curve y^2^=x^3^+7 over F~223~

(192,105), (17,56), (200,119), (1,193), (42,99)

=== Coding Elliptic Curves over Finite Fields

Because we defined an Ellptic curve point and utilize the +,-,* and / operators for Finite Fields, we can actually just combine the two classes to evaluate Elliptic Curve Points over a Finite Field.

[source,python]
----
a = FieldElement(num=0, prime=105)
b = FieldElement(num=7, prime=105)
x = FieldElement(num=192, prime=223)
y = FieldElement(num=105, prime=105)

p1 = Point(x, y, a, b)
----

When initializing `Point`, we will run through this part of the code:

[source,python]
----
class Point:

    def __init__(self, x, y, a, b):
        self.a = a
        self.b = b
        self.x = x
        self.y = y
        if self.y$$**$$2 != self.x$$**$$3+self.a*self.x + self.b: # <1>
	    raise ValueError('Point ({},{}) is not on the curve where a,b={},{}'.format(x,y,a,b))
----
<1> Check to see whether the point is on the curve.

The addition (+), exponentiation (**) and equality (==) here will end up utilizing the $$__add__$$, $$__pow__$$ and $$__eq__$$ methods from `FiniteField` respectively and _not_ the integer equivalents. As we will see, being able to do the same equation but with different definitions for the basic arithemtic operators is what will allow us to construct an Elliptic Curve Cryptography library.

==== Exercise {counter:exercise}

Write a test called test_on_curve that tests whether the points from the previous exercise over the curve y^2^=x^3^+7 over F~223~ are valid or not.


